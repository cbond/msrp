#ifndef MSRP_URI_HXX
#define MSRP_URI_HXX

#include <ostream>
#include <string>
#include <vector>

#include <asio/ip/tcp.hpp>

namespace msrp
{

class Uri;
typedef std::vector<Uri> Path;

class Uri
{
   public:
      Uri();
      Uri(const asio::ip::tcp::endpoint&, bool tls);
      Uri(const std::string&);

      const Path path() const;

      const std::string& scheme() const { return mScheme; }
      std::string& scheme() { return mScheme; }

      const std::string& user() const { return mUser; }
      std::string& user() { return mUser; }

      const std::string& host() const { return mHost; }
      std::string& host() { return mHost; }

      const unsigned short& port() const { return mPort; }
      unsigned short& port() { return mPort; }

      const std::string& session() const { return mSessionId; }
      std::string& session() { return mSessionId; }

      const std::string& transport() const { return mTransport; }
      std::string& transport() { return mTransport; }

      const bool delimiter() const { return mDelimiter; }
      bool& delimiter() { return mDelimiter; }

      bool empty() const;

      bool tls() const;

      // throws asio::error if the URI cannot be converted into a tcp::endpoint
      const asio::ip::tcp::endpoint endpoint() const;

      bool operator<(const Uri&) const;

      bool operator==(const Uri&) const;
      bool operator!=(const Uri&) const;

   private:
      friend std::ostream& operator<<(std::ostream&, const Uri&);

      std::string mScheme;
      std::string mUser;
      std::string mHost;
      std::string mSessionId;
      std::string mTransport;

      unsigned short mPort;

      bool mDelimiter;

      void parse(const std::string&);
};

std::ostream&
operator<<(std::ostream&, const Uri&);

std::ostream&
operator<<(std::ostream&, const Path&);

}

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
