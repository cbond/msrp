#ifndef MSRP_CONNECTIONPOOL_HXX
#define MSRP_CONNECTIONPOOL_HXX

#include <asio.hpp>

#include <algorithm>

#include <boost/signals/trackable.hpp>
#include <boost/enable_shared_from_this.hpp>

#include "msrp/Connection.hxx"
#include "msrp/Uri.hxx"

namespace msrp
{

class Session;

class ConnectionPool :
   public boost::noncopyable,
   public boost::signals::trackable,
   public boost::enable_shared_from_this<ConnectionPool>
{
   public:
      ConnectionPool(asio::io_service&);

      ~ConnectionPool();

      // !cb! If the connection dies and is not scheduled to reconnect, then it is
      // automatically removed from the connection pool and you must later re-add it
      // if you choose to reuse the Connection object.  You may test whether it is
      // a member of the pool with ConnectionPool::member().

      void add(boost::shared_ptr<Connection>);

      void release(boost::shared_ptr<Connection>);

      boost::shared_ptr<Connection> find(const asio::ip::tcp::endpoint& peer) const;

      boost::shared_ptr<Connection> find(const asio::ip::address& addr) const;

      boost::shared_ptr<Connection> findLocal(const asio::ip::tcp::endpoint& local) const;

      template<typename Predicate>
      boost::shared_ptr<Connection> find_if(const Predicate& p) const
      {
         std::vector<boost::shared_ptr<Connection> >::const_iterator i =
            std::find_if(mConnects.begin(), mConnects.end(), p);

         if (i != mConnects.end())
         {
            return boost::const_pointer_cast<Connection>(*i);
         }

         return boost::shared_ptr<Connection>();
      }

      bool member(boost::shared_ptr<const Connection>) const;

      void close();

   private:
      void onDisconnect(boost::shared_ptr<Connection>, const asio::error&);

      void conditionalRelease(boost::shared_ptr<Connection>);

      asio::io_service& mService;

      std::vector<boost::shared_ptr<Connection> > mConnects;
};

}

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
