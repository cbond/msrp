#ifndef MSRP_STATUS_HXX
#define MSRP_STATUS_HXX

#include <string>

#include <boost/spirit/core.hpp>
#include <boost/spirit/attribute.hpp>
#include <boost/spirit/attribute/closure.hpp>
#include <boost/spirit/phoenix.hpp>

namespace msrp
{

class StatusTuple
{
   public:
      StatusTuple() :
         mNamespace(0), mCode(0)
      {}

      StatusTuple(unsigned int ns, unsigned int code, const std::string& phrase) :
         mNamespace(ns), mCode(code), mPhrase(phrase)
      {}

      StatusTuple(const StatusTuple& st) :
         mNamespace(st.mNamespace), mCode(st.mCode), mPhrase(st.mPhrase)
      {}

      unsigned int ns() const { return mNamespace; }
      unsigned int& ns() { return mNamespace; }

      unsigned int code() const { return mCode; }
      unsigned int& code() { return mCode; }

      const std::string& phrase() const { return mPhrase; }
      std::string& phrase() { return mPhrase; }

   private:
      unsigned int mNamespace;
      unsigned int mCode;

      std::string mPhrase;
};

std::ostream&
operator<<(std::ostream&, const StatusTuple&);

namespace parser
{

struct StatusClosure : boost::spirit::closure<StatusClosure, StatusTuple>
{
   member1 status;
};

struct Status : boost::spirit::grammar<Status, StatusClosure::context_t>
{
   template<typename ScannerT>
   struct definition
   {
      definition(const Status& self)
      {
         using phoenix::arg1;
         using phoenix::arg2;
         using phoenix::bind;
         using phoenix::construct_;

         root = (
               number
                  [bind<unsigned int&>(&StatusTuple::ns)(self.status) = arg1]
            >> +boost::spirit::blank_p
            >> number
                  [bind<unsigned int&>(&StatusTuple::code)(self.status) = arg1]
            >> *boost::spirit::blank_p
            >> *boost::spirit::anychar_p
                  [bind<std::string&>(&StatusTuple::phrase)(self.status) =
                     construct_<std::string>(arg1, arg2)]
            ,

            number = boost::spirit::uint_parser<unsigned, 10, 1, 3>());
      }

      boost::spirit::rule<ScannerT> root;
      boost::spirit::subrule<0> number;

      boost::spirit::rule<ScannerT> const& start() const
      {
         return root;
      }
   };
};

} // namespace parser

}

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
