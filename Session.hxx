#ifndef MSRP_SESSION_HXX
#define MSRP_SESSION_HXX

#include <ctime>
#include <string>
#include <vector>

#include <boost/enable_shared_from_this.hpp>
#include <boost/signals.hpp>
#include <boost/shared_ptr.hpp>

#include <rutil/Data.hxx>

#include "msrp/Exception.hxx"
#include "msrp/Message.hxx"
#include "msrp/Mutex.hxx"
#include "msrp/Uri.hxx"

namespace msrp
{

class Connection;
class IncomingMessage;
class OutgoingMessage;

class Session :
   public boost::noncopyable,
   public boost::enable_shared_from_this<Session>,
   public boost::signals::trackable
{
   public:
      struct Exception : public msrp::Exception
      {
         Exception(const std::string& s, const ExceptionContext& context) :
            msrp::Exception(s, context)
         {}
      };

      static boost::shared_ptr<Session> factory(boost::shared_ptr<Connection>,
            const Uri& self);

      boost::shared_ptr<Connection> connection() const;

      const Path& address() const;

      // !cb! create an outgoing message session with an initial context message
      boost::shared_ptr<OutgoingMessage> stream(const Message&);

      // !cb! fill in message headers like To-Path and From-Path
      bool prepare(Message&) const;

      boost::signal1<void, boost::shared_ptr<const Message> >& onMessage();
      boost::signal1<bool, boost::shared_ptr<IncomingMessage> >& onMessageSession();

      ~Session();

   protected:
      Session(boost::shared_ptr<Connection>, const Uri& self);

   private:
      friend class Demultiplex;
      friend class OutgoingMessage;
      friend class IncomingMessage;

      mutable Mutex mMutex;

      boost::shared_ptr<IncomingMessage> process(boost::shared_ptr<const Message>);

      boost::shared_ptr<Connection> mConnection;

      Path mPath;

      // incoming messages
      std::vector<boost::shared_ptr<IncomingMessage> > mIncoming;

      void onIncomingComplete(const std::string&);

      // outgoing messages
      std::vector<boost::shared_ptr<OutgoingMessage> > mOutgoing;

      void onOutgoingComplete(const std::string&);

      boost::signal1<void, boost::shared_ptr<const Message> > mMessage;
      boost::signal1<bool, boost::shared_ptr<IncomingMessage> > mSession;
};

}

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
