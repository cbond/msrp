#ifndef MSRP_DEMULTIPLEX_HXX
#define MSRP_DEMULTIPLEX_HXX

#include <map>
#include <string>

#include <boost/noncopyable.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>

#include "msrp/Exception.hxx"
#include "msrp/Message.hxx"
#include "msrp/Uri.hxx"

namespace msrp
{

class IncomingMessage;
class OutgoingMessage;
class Session;

class Demultiplex : private boost::noncopyable
{
   public:
      struct Exception : public msrp::Exception
      {
         Exception(const std::string& s, const ExceptionContext& context) :
            msrp::Exception(s, context)
         {}
      };

      Demultiplex();

      // !cb! This class will not take a shared_ptr to your object, only a
      // weak_ptr, so there is no dependency.  If you don't remove your
      // object from the Demultiplex when it is destructed, it will be
      // removed when dereferencing the weak_ptr fails.

      // routes based on To-Path URIs the Session accepts
      void insert(boost::shared_ptr<Session>);
      void remove(boost::shared_ptr<Session>);

      void remove(const std::vector<Uri>&);

      // route based on Message-ID
      void insert(boost::shared_ptr<IncomingMessage>);
      void remove(boost::shared_ptr<IncomingMessage>);

      // report responses for outgoing messages
      void insert(boost::shared_ptr<OutgoingMessage>);
      void remove(boost::shared_ptr<OutgoingMessage>);

      bool process(boost::shared_ptr<const Message>);

      bool process(const asio::const_buffer&, const Message::MsgStatus);

      bool streaming() const
      {
         return mContext != mMessages.end();
      }

   private:
      typedef std::map<Uri, boost::weak_ptr<Session> > TargetMap;
      TargetMap mTargets;

      typedef std::map<std::string, boost::weak_ptr<IncomingMessage> > MessageMap;
      MessageMap mMessages;

      typedef std::map<std::string, boost::weak_ptr<OutgoingMessage> > ReportMap;
      ReportMap mReports;

      MessageMap::iterator mContext;
};

}

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
