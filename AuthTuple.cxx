#ifdef ENABLE_AUTHTUPLE

#include <ostream>
#include <iomanip>

#include <boost/algorithm/string.hpp>

#include "msrp/AuthParser.hxx"
#include "msrp/AuthTuple.hxx"

using namespace msrp;
using namespace std;

// authentication parameter IDs
const string algorithm::Key = "algorithm";
const string cnonce   ::Key = "cnonce";
const string nc       ::Key = "nc";
const string nonce    ::Key = "nonce";
const string opaque   ::Key = "opaque";
const string realm    ::Key = "realm";
const string rspauth  ::Key = "rspauth";
const string stale    ::Key = "stale";
const string qop      ::Key = "qop";
const string username ::Key = "username";

void
AuthTuple::preparse()
{
   if (exists<nc>())
   {
      param<nc>();
   }

   if (exists<stale>())
   {
      param<stale>();
   }

   if (exists<qop>())
   {
      param<qop>();
   }
}

ostream&
msrp::operator<<(ostream& os, const AuthTuple& tuple)
{
   bool nonempty = false;

   // scheme
   if (!tuple.scheme().empty())
   {
      os << tuple.scheme();

      nonempty = true;
   }

   // nonce-count
   if (tuple.mParams.nc.parsed())
   {
      if (nonempty)
      {
         os << ' ';
      }
      else
      {
         nonempty = true;
      }

      os << "nc=";

      std::ios::fmtflags flags = os.flags();

      os.setf(ios_base::right);
      os << std::setw(8)
         << std::setfill('0')
         << std::hex
         << tuple.param<nc>();

      os.flags(flags);
   }

   // stale
   if (tuple.mParams.stale.parsed())
   {
      if (nonempty)
      {
         os << ' ';
      }
      else
      {
         nonempty = true;
      }

      if (tuple.param<stale>())
      {
         os << "stale=true";
      }
      else
      {
         os << "stale=false";
      }
   }

   // qop options
   if (tuple.mParams.qop.parsed())
   {
      if (nonempty)
      {
         os << ' ';
      }
      else
      {
         nonempty = true;
      }

      os << "qop=" << '"';

      const vector<string>& params = tuple.param<qop>();

      for (vector<string>::const_iterator i = params.begin(); i != params.end(); )
      {
         os << *i;

         if (++i != params.end())
         {
            os << ',';
         }
      }

      os << '"';
   }

   // remaining parameters
   for (std::map<std::string, std::string>::const_iterator i = tuple.mRaw.begin();
         i != tuple.mRaw.end(); ++i)
   {
      if (nonempty)
      {
         os << ' ';
      }
      else
      {
         nonempty = true;
      }

      if (boost::algorithm::iequals(i->first, "nc") ||
          boost::algorithm::iequals(i->first, "stale"))
      {
         os << i->first << '=' << i->second;
      }
      else
      {
         os << i->first << '=' << '"' << i->second << '"';
      }
   }

   return os;
}

#endif // ENABLE_AUTHTUPLE

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
