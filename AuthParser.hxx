#ifndef MSRP_AUTHPARSER_HXX
#define MSRP_AUTHPARSER_HXX

#ifdef ENABLE_AUTHTUPLE

#include <string>

#include <boost/mem_fn.hpp>
#include <boost/spirit/core.hpp>
#include <boost/spirit/actor.hpp>
#include <boost/spirit/attribute.hpp>
#include <boost/spirit/phoenix.hpp>

#include "msrp/AuthTuple.hxx"

namespace msrp
{

namespace parser
{

struct AuthClosure : boost::spirit::closure<AuthClosure, AuthTuple>
{
   member1 auth;
};

template<bool Scheme>
struct Auth : boost::spirit::grammar<Auth<Scheme>, AuthClosure::context_t>
{
   template<typename ScannerT>
   struct definition
   {
      template<typename Actor, typename T>
         inline boost::spirit::ref_value_actor<T, Actor>
      assign_property(T& ref)
      {
         return boost::spirit::ref_value_actor<T, Actor>(ref);
      }

      struct scheme
      {
         template<typename T, typename Iterator>
         inline void act(T& ref, Iterator const&, Iterator const&) const
         {
            ref().scheme() = "Digest";
         }
      };

      definition(const Auth& self)
      {
         using phoenix::arg1;
         using phoenix::arg2;
         using phoenix::bind;

         if (Scheme)
         {
            root = boost::spirit::str_p("Digest")
                     [assign_property<scheme>(self.auth)]
               >> boost::spirit::blank_p
               >> param
               >> *(boost::spirit::ch_p(',') >> boost::spirit::blank_p >> param)
               ;
         }
         else
         {
            root = param >> *(boost::spirit::ch_p(',') >> boost::spirit::blank_p >> param);
         }

         param = (+boost::spirit::alnum_p)
                    [phoenix::var(key) = phoenix::construct_<std::string>(arg1, arg2)]
            >> boost::spirit::ch_p('=')
            >> (
                 (boost::spirit::ch_p('"')
                  >> (*(boost::spirit::anychar_p - boost::spirit::ch_p('"')))
                        [boost::spirit::insert_at_a(bind(&AuthTuple::params)(self.auth)(), key)]
                  >> boost::spirit::ch_p('"')
               )
               | (*(boost::spirit::anychar_p
                       - boost::spirit::blank_p
                       - boost::spirit::ch_p(','))
                 )[boost::spirit::insert_at_a(bind(&AuthTuple::params)(self.auth)(), key)]
               )
            ;

         BOOST_SPIRIT_DEBUG_NODE(root);
         BOOST_SPIRIT_DEBUG_NODE(param);
      }

      std::string key;

      boost::spirit::rule<ScannerT> root;
      boost::spirit::rule<ScannerT> param;

      boost::spirit::rule<ScannerT> const& start() const
      {
         return root;
      }
   };

   typedef std::map<std::string, std::string> ParamMap;
};

} // namespace parser

}

#endif // ENABLE_AUTHTUPLE

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
