#ifndef MSRP_COALESCEDNSRESULTS_HXX
#define MSRP_COALESCEDNSRESULTS_HXX

#include <cstdlib>
#include <vector>

#include <asio/ip/address.hpp>

#include <rutil/dns/DnsStub.hxx>

#include "DnsResultSinkImpl.hxx"

namespace msrp
{

template<
   typename Handler,
   typename PostFunction
   >
class CoalesceDnsResults : public DnsResultSinkImpl
{
   public:
      CoalesceDnsResults(asio::io_service& fifo,
            const Handler& handler,
            const PostFunction& post) :
         mFifo(fifo), mHandler(handler), mPost(post), mQueries(1)
      {
#ifdef USE_IPV6
         mQueries++;
#endif
      }

      virtual ~CoalesceDnsResults()
      {}

   private:
      template<typename Record>
      void answer(const resip::DNSResult<Record>& r)
      {
         typename std::vector<Record>::const_iterator i = r.records.begin();
         while (i != r.records.end())
         {
            try
            {
               mRecords.push_back(address(*i++));
            }
            catch (const asio::error&)
            {}
         }

         if (--mQueries == 0)
         {
            mFifo.post(boost::bind(mHandler, mRecords));

            mPost(this);
         }
      }

      const asio::ip::address address(const resip::DnsHostRecord& r) const
      {
         return asio::ip::address_v4(ntohl(r.addr().s_addr));
      }

#ifdef USE_IPV6
      const asio::ip::address address(const resip::DnsAAAARecord& r) const
      {
         asio::ip::address_v6::bytes_type bytes;
         memcpy(bytes.c_array(), &r.v6Address().s6_addr, sizeof(r.v6Address().s6_addr));

         return asio::ip::address_v6(bytes);
      }
#endif

      virtual void onDnsResult(const resip::DNSResult<resip::DnsHostRecord>& r)
      {
         answer(r);
      }

#ifdef USE_IPV6
      virtual void onDnsResult(const resip::DNSResult<resip::DnsAAAARecord>& r)
      {
         answer(r);
      }
#endif

      asio::io_service& mFifo;

      // !cb! std::unary_function<std::vector<asio::ip::address>, void>
      //
      // It is important that your address vector parameter is not a ref&,
      // and forces a copy, since this handler will be deleted by the time
      // mHandler is called by the asio::io_service dispatcher.
      const Handler mHandler;

      // !cb! std::unary_function<resip::DnsResultSink*, void> (cleanup)
      const PostFunction mPost;

      unsigned int mQueries;

      std::vector<asio::ip::address> mRecords;
};

}

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
