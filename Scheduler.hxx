#ifndef MSRP_SCHEDULER_HXX
#define MSRP_SCHEDULER_HXX

#include <set>
#include <string>

#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>

namespace msrp
{

class OutgoingMessage;
class Session;

// !cb! I'm not really sure how apt this scheduler metaphor is.  Basically, when
// there are several messages outgoing, we need to pick the one most deserving of
// the transport resource for a given Session, not unlike how a scheduler would
// select a thread and process to run on a CPU.  Selection is done based on the
// amount of data queued to send, and the last time the OutgoingMessage ran.
class Scheduler
{
   public:
      Scheduler();

      boost::shared_ptr<Session> process();

      boost::shared_ptr<OutgoingMessage> thread();

      // !cb! takes a shared_ptr but holds a weak_ptr (no dependency)
      void queue(boost::shared_ptr<OutgoingMessage>);
      void erase(boost::shared_ptr<OutgoingMessage>);

   private:
      friend class OutgoingMessage;

      class Thread
      {
         public:
            Thread(boost::shared_ptr<OutgoingMessage>);

            boost::shared_ptr<OutgoingMessage> get() const;

            bool operator<(const Thread&) const;

            bool operator==(const Thread&) const;

         private:
            boost::weak_ptr<OutgoingMessage> mMsg;
      };

      std::vector<Thread> mQueue;
};

}

#endif

// Copyright 2007 Chris Bond
// 
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
